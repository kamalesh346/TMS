generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TripStatus {
  scheduled
  ongoing
  completed
}

enum BookingStatus {
  pending
  approved
  rejected
  cancelled
  assigned
  ongoing 
  completed
}

model User {
  id             Int                 @id @default(autoincrement())
  name           String
  loginId        String              @unique // Unified login field (email or driver code)
  password       String
  role           String              // "admin", "driver", "booker"
  createdAt      DateTime            @default(now())

  email          String?             @unique

  // Relations
  bookings       Booking[]
  trips          Trip[]              @relation("DriverTrips")
  driverMapping  DriverVehicle[]
  fuelLogs       FuelLog[]           @relation("DriverFuel")
  createdFuelLog FuelLog[]           @relation("FuelLogCreator")

  @@map("user")
}

model Booking {
  id                  Int              @id @default(autoincrement())
  userId              Int
  purpose             String
  pickup              String
  delivery            String
  itemDesc            String
  weight              Float
  vehicleTypeId       Int
  vehicleLength       Float            @default(0)
  vehicleBreadth      Float            @default(0)
  vehicleHeight       Float            @default(0)
  requiredStartTime   DateTime         @default(now())
  requiredEndTime     DateTime         @default(now())
  status              BookingStatus    @default(pending)

  createdAt           DateTime         @default(now())
  tripId              Int?
  trip                Trip?            @relation(fields: [tripId], references: [id], onDelete: SetNull)
  user                User             @relation(fields: [userId], references: [id])
  vehicleType         VehicleType      @relation(fields: [vehicleTypeId], references: [id])

  startedAt           DateTime?
  loadingStartTime    DateTime?
  loadingEndTime      DateTime?
  unloadingStartTime  DateTime?
  unloadingEndTime    DateTime?
  completedAt         DateTime?

}

model Trip {
  id             Int         @id @default(autoincrement())
  driverId       Int
  vehicleId      Int
  startTime      DateTime?
  endTime        DateTime?
  status         TripStatus  @default(scheduled)
  createdAt      DateTime    @default(now())

  driver         User        @relation("DriverTrips", fields: [driverId], references: [id])
  vehicle        Vehicle     @relation(fields: [vehicleId], references: [id])
  bookings       Booking[]
}

model VehicleType {
  id        Int       @id @default(autoincrement())
  type      String    @unique
  length    Float
  breadth   Float
  height    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  bookings  Booking[]
  vehicles  Vehicle[]

  @@map("vehicletype")
}

model Vehicle {
  id            Int        @id @default(autoincrement())
  number        String     @unique
  vehicleTypeId Int

  vehicleType   VehicleType    @relation(fields: [vehicleTypeId], references: [id])
  trips         Trip[]
  mapping       DriverVehicle? @relation("VehicleToDriverMapping")
  fuelLogs      FuelLog[]

  @@map("vehicle")
}

model FuelLog {
  id           Int       @id @default(autoincrement())
  driverId     Int
  vehicleId    Int
  odometer     Float
  fuelQuantity Float
  filledAt     DateTime  @default(now())
  createdBy    Int

  driver       User      @relation("DriverFuel", fields: [driverId], references: [id])
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id])
  user         User      @relation("FuelLogCreator", fields: [createdBy], references: [id])
}

model Location {
  id    Int    @id @default(autoincrement())
  name  String @unique

  @@map("location")
}

model DriverVehicle {
  id         Int      @id @default(autoincrement())
  driverId   Int
  vehicleId  Int      @unique
  assignedAt DateTime @default(now())

  driver     User     @relation(fields: [driverId], references: [id])
  vehicle    Vehicle  @relation("VehicleToDriverMapping", fields: [vehicleId], references: [id])
}